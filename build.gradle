buildscript {
    repositories {
        maven { url 'https://nexus.vemilyus.com/repository/maven-all/' }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"

        classpath "gradle.plugin.io.gitlab.arturbosch.detekt:detekt-gradle-plugin:$detektPluginVersion"
        classpath "net.researchgate:gradle-release:$releasePluginVersion"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:$dokkaVersion"

        classpath "com.jaredsburrows:gradle-license-plugin:0.8.41"
    }
}

apply plugin: 'kotlin'

apply plugin: 'jacoco'
apply plugin: 'io.gitlab.arturbosch.detekt'

apply plugin: "net.researchgate.release"
apply plugin: 'org.jetbrains.dokka'

apply plugin: 'maven'
apply plugin: 'maven-publish'

apply plugin: 'com.jaredsburrows.license'

repositories {
    maven { url 'https://nexus.vemilyus.com/repository/maven-all/' }
}

sourceSets {
    main {
        kotlin {
            srcDir 'src'
        }
        resources {
            srcDir 'resources'
        }
    }
    test {
        kotlin {
            srcDir 'test'
        }
        resources {
            srcDir 'test-resources'
        }
    }
}

compileKotlin {
    kotlinOptions {
        freeCompilerArgs = ['-Xno-param-assertions', '-Xno-call-assertions']
        kotlinOptions.jvmTarget = '1.8'
    }
}

compileTestKotlin {
    kotlinOptions.jvmTarget = '1.8'
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"
    compile "org.jetbrains.kotlinx:kotlinx-coroutines-jdk8:$kotlinxVersion"

    compile "org.slf4j:slf4j-api:$slf4jVersion"

    testCompile "ch.qos.logback:logback-classic:$logbackVersion"
    testCompile 'org.apache.commons:commons-compress:1.17'

    testCompile "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"
    testCompile "org.junit.jupiter:junit-jupiter-api:$junitJupiterVersion"
    testRuntime "org.junit.jupiter:junit-jupiter-engine:$junitJupiterVersion"
}

detekt {
    input = files('src')
    config = files('detekt.yml')
    filters = '.*test.*,.*/resources/.*,.*/tmp/.*'

    reports {
        xml {
            enabled = true
            destination = file("$buildDir/reports/detekt.xml")
        }
    }
}

jacoco {
    toolVersion = '0.8.2'
}

test {
    useJUnitPlatform()
    jacoco {
        destinationFile = file("$buildDir/jacoco/test.exec")
    }
}

jacocoTestReport.dependsOn('check')
build.dependsOn('jacocoTestReport')
build.dependsOn('licenseReport')

release {
    tagTemplate = 'v$version'
}

dokka {
    moduleName = 'horus-events'

    outputFormat = 'html'
    outputDirectory = "$buildDir/javadoc"

    jdkVersion = 8

    impliedPlatforms = ["JVM"]

    noStdlibLink = false
}

task packageSources(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task packageJavadoc(type: Jar, dependsOn: dokka) {
    classifier = 'javadoc'
    from "$buildDir/javadoc"
}

artifacts.archives packageSources, packageJavadoc

publishing {
    publications {
        mavenProject(MavenPublication) {
            from components.java
            groupId project.group
            artifactId project.name
            version project.version

            artifact packageSources {
                classifier 'sources'
            }

            artifact packageJavadoc {
                classifier 'javadoc'
            }
        }
    }

    def nexusUser = project.hasProperty('nexusUser') ? project.property('nexusUser') : System.getenv('NEXUS_USER')
    def nexusPass = project.hasProperty('nexusPass') ? project.property('nexusPass') : System.getenv('NEXUS_PASS')

    if (nexusUser != null && nexusPass != null) {
        repositories {
            maven {
                name 'vemilyus-nexus'

                if (project.version.endsWith('-SNAPSHOT'))
                    url 'https://nexus.vemilyus.com/repository/snapshots/'
                else
                    url 'https://nexus.vemilyus.com/repository/releases/'

                credentials(PasswordCredentials) {
                    username nexusUser
                    password nexusPass
                }
            }
        }
    }
}
