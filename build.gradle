plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.4.20'

    id 'io.gitlab.arturbosch.detekt' version '1.15.0-RC1'
    id 'jacoco'
    id 'de.jansauer.printcoverage' version '2.0.0'

    id 'net.researchgate.release' version '2.8.1'

    id 'org.jetbrains.dokka' version '1.4.20'
    id 'com.github.hierynomus.license' version '0.15.0'

    id 'maven-publish'
    id 'name.remal.maven-publish-ossrh' version '1.1.4' apply false
}

sourceSets {
    main {
        kotlin {
            srcDir 'src'
        }
        resources {
            srcDir 'resources'
        }
    }
    test {
        kotlin {
            srcDir 'test'
        }
        resources {
            srcDir 'test-resources'
        }
    }
}

compileKotlin {
    kotlinOptions {
        freeCompilerArgs = ['-Xno-param-assertions', '-Xno-call-assertions']
        kotlinOptions.jvmTarget = '1.8'
    }
}

compileTestKotlin {
    kotlinOptions.jvmTarget = '1.8'
}

sourceCompatibility = 8
targetCompatibility = 8

repositories {
    jcenter()
    mavenCentral()
}

dependencies {
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlinxVersion"

    implementation "org.slf4j:slf4j-api:$slf4jVersion"

    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlinxVersion"
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junitJupiterVersion"

    testRuntime "org.junit.jupiter:junit-jupiter-engine:$junitJupiterVersion"
    testRuntime "ch.qos.logback:logback-classic:$logbackVersion"
}

detekt {
    input = files('src')
    config = files('detekt.yml')

    reports {
        xml {
            enabled = true
            destination = file("$buildDir/reports/detekt.xml")
        }
    }
}

license {
    exclude '**/*.json'
    exclude '**/*.properties'
    exclude '**/META-INF/**/*'

    header = file('HEADER.txt')

    ext {
        year = Calendar.getInstance().get(Calendar.YEAR)
    }
}

jacoco {
    toolVersion = '0.8.6'
}

test {
    useJUnitPlatform()
    jacoco {
        destinationFile = file("$buildDir/jacoco/test.exec")
    }
}

jacocoTestReport.dependsOn('check')
build.dependsOn('jacocoTestReport')

release {
    tagTemplate = 'v$version'
}

jar {
    manifest {
        attributes('Automatic-Module-Name': "${project.group}.${project.name}".replaceAll('[^\\w\\.\\$_]', "_"))
        attributes('Implementation-Version': project.version)
        attributes('Implementation-Title': 'Events for Kotlin')
    }
}

dokkaJavadoc {
    moduleName = 'v47.io Events'
}

task sourcesJar(type: Jar) {
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: dokkaJavadoc) {
    archiveClassifier = 'javadoc'
    from dokkaJavadoc.outputDirectory
}

artifacts {
    archives(sourcesJar)
    archives(javadocJar)
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId project.group
            artifactId project.name
            version project.version

            from components.java

            artifact sourcesJar {
                classifier 'sources'
            }

            artifact javadocJar {
                classifier 'javadoc'
            }

            pom {
                name = 'Events for Kotlin'
                description = 'Simple asynchronous events for Kotlin'
                url = 'https://github.com/v47-io/events'

                licenses {
                    license {
                        name = 'BSD 3-Clause License'
                        url = 'https://opensource.org/licenses/BSD-3-Clause'
                    }
                }

                developers {
                    developer {
                        id = 'vemilyus'
                        name = 'Alex Katlein'
                        email = 'dev@vemilyus.com'
                    }
                }

                scm {
                    connection = 'scm:git:git://github.com/v47-io/events.git'
                    developerConnection = 'scm:git:git://github.com/v47-io/events.git'
                    url = 'https://github.com/v47-io/events'
                }
            }
        }
    }
}

def ossrhUser = project.hasProperty('ossrhUser') ? project.property('ossrhUser') : System.getenv('OSSRH_USER')
def ossrhPass = project.hasProperty('ossrhPass') ? project.property('ossrhPass') : System.getenv('OSSRH_PASS')

if (ossrhUser != null && ossrhPass != null && !project.version.endsWith('-SNAPSHOT')) {
    apply plugin: 'signing'
    apply plugin: 'name.remal.maven-publish-ossrh'

    publishing {
        repositories {
            ossrh {
                credentials {
                    username = ossrhUser
                    password = ossrhPass
                }
            }
        }
    }
}
