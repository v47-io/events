plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.4.20'

    id 'io.gitlab.arturbosch.detekt' version '1.15.0-RC1'
    id 'jacoco'
    id 'de.jansauer.printcoverage' version '2.0.0'

    id 'net.researchgate.release' version '2.8.1'

    id 'org.jetbrains.dokka' version '0.10.1'
    id 'com.github.hierynomus.license' version '0.15.0'

    id 'maven'
    id 'maven-publish'

    id 'com.jfrog.bintray' version '1.8.5' apply false
}

sourceSets {
    main {
        kotlin {
            srcDir 'src'
        }
        resources {
            srcDir 'resources'
        }
    }
    test {
        kotlin {
            srcDir 'test'
        }
        resources {
            srcDir 'test-resources'
        }
    }
}

compileKotlin {
    kotlinOptions {
        freeCompilerArgs = ['-Xno-param-assertions', '-Xno-call-assertions']
        kotlinOptions.jvmTarget = '1.6'
    }
}

compileTestKotlin {
    kotlinOptions.jvmTarget = '1.6'
}

repositories {
    jcenter()
    mavenCentral()
}

dependencies {
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlinxVersion"

    implementation "org.slf4j:slf4j-api:$slf4jVersion"

    testImplementation "ch.qos.logback:logback-classic:$logbackVersion"

    testImplementation "org.junit.jupiter:junit-jupiter-api:$junitJupiterVersion"
    testRuntime "org.junit.jupiter:junit-jupiter-engine:$junitJupiterVersion"
}

detekt {
    input = files('src')
    config = files('detekt.yml')

    reports {
        xml {
            enabled = true
            destination = file("$buildDir/reports/detekt.xml")
        }
    }
}

license {
    exclude '**/*.json'
    exclude '**/*.properties'
    exclude '**/META-INF/**/*'

    header = file('HEADER.txt')

    ext {
        year = Calendar.getInstance().get(Calendar.YEAR)
    }
}

jacoco {
    toolVersion = '0.8.5'
}

test {
    useJUnitPlatform()
    jacoco {
        destinationFile = file("$buildDir/jacoco/test.exec")
    }
}

jacocoTestReport.dependsOn('check')
build.dependsOn('jacocoTestReport')

release {
    tagTemplate = 'v$version'
}

dokka {
    configuration {
        moduleName = 'horus-events'

        outputFormat = 'html'
        outputDirectory = "$buildDir/javadoc"

        jdkVersion = 6

        impliedPlatforms = ["JVM"]

        noStdlibLink = false
    }
}

task packageSources(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task packageJavadoc(type: Jar, dependsOn: dokka) {
    classifier = 'javadoc'
    from "$buildDir/javadoc"
}

artifacts.archives packageSources, packageJavadoc

publishing {
    publications {
        MavenPublication(MavenPublication) {
            from components.java
            groupId project.group
            artifactId project.name
            version project.version

            artifact packageSources {
                classifier 'sources'
            }

            artifact packageJavadoc {
                classifier 'javadoc'
            }
        }
    }
}

def bintrayUser = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
def bintrayKey = project.hasProperty('bintrayKey') ? project.property('bintrayKey') : System.getenv('BINTRAY_KEY')

if (bintrayUser != null && bintrayKey != null && !project.version.endsWith('-SNAPSHOT')) {
    apply plugin: 'com.jfrog.bintray'

    bintray {
        user = bintrayUser
        key = bintrayKey
        publications = ['MavenPublication']

        pkg {
            repo = 'horus'
            name = project.name
            licenses = ['Apache-2.0']
            vcsUrl = 'https://github.com/vemilyus/horus-events'
        }
    }

    publish.dependsOn('bintrayUpload')
}
